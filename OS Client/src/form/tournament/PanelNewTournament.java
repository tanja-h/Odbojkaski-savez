/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.tournament;

import communication.CommunicationC;
import constants.Operation;
import domain.City;
import domain.Club;
import domain.Match;
import domain.Tournament;
import domain.domainEnum.Winner;
import form.club.model.TableModelClub;
import form.tournament.match.model.TableModelMatch;
import java.awt.Window;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import logic.ControlerC;
import session.Session;
import transfer.ClientRequest;
import util.DateFormatter;

/**
 *
 * @author TANJA-PC
 */
public class PanelNewTournament extends javax.swing.JPanel {

    private JDialog ancestor;
    TableModelMatch modelMatch;
    TableModelClub modelClub;

    /**
     * Creates new form PanelTournament
     *
     * @param ancestor
     */
    public PanelNewTournament(JDialog ancestor) {
        this.ancestor = ancestor;
        ControlerC.getInstance().getFormMain().setPanelNewTournament(this);

        initComponents();
        requestForCMB();
        prepareTables();
        btnIspisi.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTournament = new javax.swing.JLabel();
        lblTournamentName = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblMatches = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblWinner = new javax.swing.JLabel();
        lblClubs = new javax.swing.JLabel();
        txtTournamentID = new javax.swing.JTextField();
        txtTournamentName = new javax.swing.JTextField();
        txtWinner = new javax.swing.JTextField();
        txtDate = new javax.swing.JFormattedTextField();
        cmbCity = new javax.swing.JComboBox<>();
        cmbClub = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatches = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClubs = new javax.swing.JTable();
        btnAddMatch = new javax.swing.JButton();
        btnDeleteMatch = new javax.swing.JButton();
        btnAddParticipant = new javax.swing.JButton();
        btnDeleteParticipant = new javax.swing.JButton();
        btnSaveTournament = new javax.swing.JButton();
        btnChooseWinner = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnIspisi = new javax.swing.JButton();

        lblTournament.setText("Turnir ID:");

        lblTournamentName.setText("Naziv turnira:");

        lblDate.setText("Datum (dd.MM.yyyy):");

        lblMatches.setText("Utakmice");

        lblCity.setText("Grad:");

        lblWinner.setText("Pobednik:");

        lblClubs.setText("Klubovi:");

        txtWinner.setEditable(false);
        txtWinner.setEnabled(false);

        txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbClub.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblMatches);

        tblClubs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblClubs);

        btnAddMatch.setText("Dodaj utakmicu");
        btnAddMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMatchActionPerformed(evt);
            }
        });

        btnDeleteMatch.setText("Obriši utakmicu");
        btnDeleteMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMatchActionPerformed(evt);
            }
        });

        btnAddParticipant.setText("Dodaj učesnika");
        btnAddParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParticipantActionPerformed(evt);
            }
        });

        btnDeleteParticipant.setText("Obriši učesnika");
        btnDeleteParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteParticipantActionPerformed(evt);
            }
        });

        btnSaveTournament.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSaveTournament.setText("Sačuvaj turnir");
        btnSaveTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTournamentActionPerformed(evt);
            }
        });

        btnChooseWinner.setText("Izaberi pobednika");
        btnChooseWinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseWinnerActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnIspisi.setText("ispisi utakmice");
        btnIspisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIspisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(btnIspisi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteMatch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAddMatch))
                            .addComponent(lblMatches, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblTournamentName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblTournament, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTournamentID)
                                    .addComponent(txtTournamentName)
                                    .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblClubs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbClub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnDeleteParticipant)
                                .addGap(18, 18, 18)
                                .addComponent(btnAddParticipant))
                            .addComponent(btnChooseWinner)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblWinner)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtWinner, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveTournament))
                    .addComponent(jSeparator2))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTournament)
                            .addComponent(txtTournamentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTournamentName)
                            .addComponent(txtTournamentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtWinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblWinner))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChooseWinner))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCity)
                                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblMatches)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAddMatch)
                                    .addComponent(btnDeleteMatch)
                                    .addComponent(btnIspisi)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClubs)
                            .addComponent(cmbClub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteParticipant)
                            .addComponent(btnAddParticipant))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveTournament)
                    .addComponent(btnCancel))
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParticipantActionPerformed
        Club participant = (Club) cmbClub.getSelectedItem();
        if (modelClub.getClubs().contains(participant)) {
            JOptionPane.showMessageDialog(this, "Učesnik je već dodat!");
            return;
        }
        if (modelClub.getRowCount() == 8) {
            JOptionPane.showMessageDialog(this, "Maksimalan broj učesnika je 8!");
            return;
        }
        modelClub.addClub(participant);
        adjustCbClub((LinkedList<Club>) modelClub.getClubs());
    }//GEN-LAST:event_btnAddParticipantActionPerformed

    private void btnDeleteParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteParticipantActionPerformed
        try {
            int selectedRow = getSelectedRow(tblClubs);
            modelClub.removeClub(selectedRow);
            adjustCbClub((LinkedList<Club>) modelClub.getClubs());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteParticipantActionPerformed

    private void btnDeleteMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMatchActionPerformed
        try {
            int selectedRow = getSelectedRow(tblMatches);
            modelMatch.removeMatch(selectedRow);
            reorderMatches();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteMatchActionPerformed

    private void btnAddMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMatchActionPerformed
        if (modelMatch.getRowCount() == 7) {
            JOptionPane.showMessageDialog(this, "Maksimalan broj utakmica je 7!");
        } else {
            Match match = new Match();
            match.setMatchID(modelMatch.getRowCount() + 1);
            modelMatch.addMatch(match);
        }
    }//GEN-LAST:event_btnAddMatchActionPerformed

    private void btnChooseWinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseWinnerActionPerformed
        try {
            int selectedRow = getSelectedRow(tblClubs);
            Club winner = modelClub.getClub(selectedRow);
            txtWinner.setText(winner.getClubName());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnChooseWinnerActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTournamentActionPerformed
        try {
            validation();
            Tournament t = new Tournament();
            t.setTournamentID(Integer.valueOf(txtTournamentID.getText()));
            t.setTournamentName(txtTournamentName.getText());
            t.setDate(getDate());
            t.setCity((City) cmbCity.getSelectedItem());

            Club w = getWinner();
            t.setWinner(w);
            for (Match match : modelMatch.getMatches()) {
                match.setTournamentID(t.getTournamentID());
            }
            t.setMatches((LinkedList<Match>) modelMatch.getMatches());

            ClientRequest cr = new ClientRequest();
            cr.setOperation(Operation.ADD_TOURNAMENT);
            cr.setParameter(t);
            CommunicationC.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška!",
                    JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveTournamentActionPerformed

    private void btnIspisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIspisiActionPerformed
        for (Match m : modelMatch.getMatches()) {
            System.out.println(m.getAttributeValues());
        }
    }//GEN-LAST:event_btnIspisiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMatch;
    private javax.swing.JButton btnAddParticipant;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooseWinner;
    private javax.swing.JButton btnDeleteMatch;
    private javax.swing.JButton btnDeleteParticipant;
    private javax.swing.JButton btnIspisi;
    private javax.swing.JButton btnSaveTournament;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JComboBox<Object> cmbClub;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblClubs;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblMatches;
    private javax.swing.JLabel lblTournament;
    private javax.swing.JLabel lblTournamentName;
    private javax.swing.JLabel lblWinner;
    private javax.swing.JTable tblClubs;
    private javax.swing.JTable tblMatches;
    private javax.swing.JFormattedTextField txtDate;
    private javax.swing.JTextField txtTournamentID;
    private javax.swing.JTextField txtTournamentName;
    private javax.swing.JTextField txtWinner;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    private void requestForCMB() {
        requestCities();
        requestClubs();
    }

    private void requestCities() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request city", "PanelNewTournament");
        cr.setOperation(Operation.GET_ALL_CITIES);
        CommunicationC.getInstance().sendRequest(cr);
    }

    private void requestClubs() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request club", "PanelNewTournament");
        cr.setOperation(Operation.GET_ALL_CLUBS);
        CommunicationC.getInstance().sendRequest(cr);
    }

    public void populateCMBCities(LinkedList<City> cities) {
        cmbCity.removeAllItems();
        for (City c : cities) {
            cmbCity.addItem(c);
        }
    }

    public void populateCMBClubs(LinkedList<Club> clubs) {
        cmbClub.removeAllItems();
        for (Club c : clubs) {
            cmbClub.addItem(c);
        }
    }

    private void prepareTables() {
        prepareTableMatch();
        prepareTableClub();
    }

    private void prepareTableMatch() {
        LinkedList<Match> list = new LinkedList<>();
        modelMatch = new TableModelMatch(list);
        tblMatches.setModel(modelMatch);

        //tblMatches.getColumnModel().removeColumn(tblMatches.getColumnModel().getColumn(0));
        JComboBox cbClub = new JComboBox<>();
        TableColumn columnHost = tblMatches.getColumnModel().getColumn(2);
        columnHost.setCellEditor(new DefaultCellEditor(cbClub));
        TableColumn columnGuest = tblMatches.getColumnModel().getColumn(3);
        columnGuest.setCellEditor(new DefaultCellEditor(cbClub));

        JComboBox cbWinner = new JComboBox<>();
        cbWinner.setModel(new DefaultComboBoxModel(Winner.values()));
        TableColumn columnWinner = tblMatches.getColumnModel().getColumn(5);
        columnWinner.setCellEditor(new DefaultCellEditor(cbWinner));
        
        adjustTableMatch();
    }

    private void adjustCbClub(LinkedList<Club> participants) {
        JComboBox cbClub = new JComboBox();
        for (Club c : participants) {
            cbClub.addItem(c);
        }
        TableColumn columnHost = tblMatches.getColumnModel().getColumn(2);
        columnHost.setCellEditor(new DefaultCellEditor(cbClub));
        TableColumn columnGuest = tblMatches.getColumnModel().getColumn(3);
        columnGuest.setCellEditor(new DefaultCellEditor(cbClub));
    }

    private void prepareTableClub() {
        LinkedList<Club> list = new LinkedList<>();
        modelClub = new TableModelClub(list);
        tblClubs.setModel(modelClub);

        for (int i = modelClub.getColumnCount() - 1; i >= 0; i--) {
            TableColumn column = tblClubs.getColumnModel().getColumn(i);
            switch (i) {
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(70);
                    break;
                case 2:
                    column.setPreferredWidth(50);
                    break;
                default:
                    tblClubs.getColumnModel().removeColumn(column);
                    break;
            }
        }
    }

    private int getSelectedRow(JTable tbl) throws Exception {
        int selectedRow = tbl.getSelectedRow();
        if (selectedRow == -1) {
            throw new Exception("Niste odabrali red!");
        }
        return selectedRow;
    }

    private void reorderMatches() {
        LinkedList<Match> list = (LinkedList<Match>) modelMatch.getMatches();
        for (int i = 0; i < list.size(); i++) {
            list.get(i).setMatchID(i + 1);
        }
    }

    private void validation() throws Exception {
        String id = txtTournamentID.getText();
        if (id.isEmpty() || id.equals("")) {
            throw new Exception("Nije unet ID turnira!");
        }
        for (int i = 0; i < id.length(); i++) {
            if (!Character.isDigit(id.charAt(i))) {
                throw new Exception("ID turnira ne sme sadržati slova!");
            }
        }
        if (id.length() > 3) {
            throw new Exception("ID turnira može imati najviše 3 cifre!");
        }

        if (txtTournamentName.getText().isEmpty() || txtTournamentName.getText().equals("")) {
            throw new Exception("Nije unet naziv turnira!");
        }

        String date = txtDate.getText();
        if (date.isEmpty() || date.equals("")) {
            throw new Exception("Nije unet datum turnira!");
        }
        DateFormatter.stringToDateApp(date);

        City city = (City) cmbCity.getSelectedItem();
        if (city == null) {
            throw new Exception("Nije odabran grad!");
        }

        String winner = txtWinner.getText();
        if (winner.isEmpty() || winner.equals("")) {
            throw new Exception("Nije izabran pobednik!");
        }

        if (modelMatch.getRowCount() < 1) {
            throw new Exception("Morate uneti bar jednu utakmicu!");
        }

    }
    
    
    private Date getDate() throws Exception {
        Date d1 = DateFormatter.stringToDateApp(txtDate.getText());
        System.out.println("pre parsiranja: " + DateFormatter.dateToStringApp(d1));

        String dateS = DateFormatter.dateToStringDB(d1);
        Date d2 = DateFormatter.stringToDateDB(dateS);
        System.out.println("posle parsiranja: " + dateS);

        return d2;
    }
    
    private Club getWinner() throws Exception {
        String winner = txtWinner.getText();
        for (Club c : modelClub.getClubs()) {
            if (c.getClubName().equals(winner)) {
                return c;
            }
        }
        throw new Exception("Pobednik se ne nalazi na listi učesnika!");
    }


    public void cancel() {
        ControlerC.getInstance().setActiveWindow((Window) ancestor.getParent());
        ControlerC.getInstance().getFormMain().setPanelNewTournament(null);
        ancestor.dispose();
    }

    public void resetForNewT() {
        txtTournamentID.setText("");
        txtTournamentName.setText("");
        txtDate.setText("");
        txtWinner.setText("");
        
        modelClub.removeClubs();
        modelMatch.removeMatches();
    }
    
    private void adjustTableMatch() {
        for (int i = modelMatch.getColumnCount()-1; i >=0 ; i--) {
            TableColumn column = tblMatches.getColumnModel().getColumn(i);
            switch(i){
                case 0:
                    column.setPreferredWidth(65);
                    break;
                case 1:
                    column.setPreferredWidth(85);
                    break;
                case 2:
                    column.setPreferredWidth(90);
                    break;
                case 3:
                    column.setPreferredWidth(90);
                    break;
                case 4:
                    column.setPreferredWidth(70);
                    break;
                case 5:
                    column.setPreferredWidth(85);
                    break;
                case 6:
                    column.setPreferredWidth(70);
                    break;
            }
        }

    }
    
    
}