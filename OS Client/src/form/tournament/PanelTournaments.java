/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.tournament;

import communication.CommunicationC;
import constants.Operation;
import domain.Match;
import domain.Tournament;
import form.tournament.match.model.TableModelMatch;
import form.tournament.model.TableModelTournament;
import java.awt.Window;
import java.util.LinkedList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import logic.ControlerC;
import transfer.ClientRequest;

/**
 *
 * @author TANJA-PC
 */
public class PanelTournaments extends javax.swing.JPanel {
    
    private JDialog ancestor;
    private TableModelMatch modelMatch;
    private TableModelTournament modelTournament;
    
    /**
     * Creates new form PanelTournaments
     * @param ancestor
     */
    public PanelTournaments(JDialog ancestor) {
        this.ancestor = ancestor;
        initComponents();
        prepareTableMatch();
        prepareTableTournament();
        requestTournaments();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTournaments = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTournaments = new javax.swing.JTable();
        btnAddTournament = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMatches = new javax.swing.JTable();
        lblMatches = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        lblTournaments.setText("Odigrani turniri");

        tblTournaments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTournaments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTournamentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTournaments);

        btnAddTournament.setText("Dodaj turnir");
        btnAddTournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTournamentActionPerformed(evt);
            }
        });

        tblMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblMatches);

        lblMatches.setText("Odigrane utakmice na turnirima");

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Izađi");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRefresh.setText("Osveži");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMatches)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCancel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRefresh))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                        .addComponent(btnAddTournament)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTournaments, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTournaments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddTournament)
                .addGap(18, 18, 18)
                .addComponent(lblMatches)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnRefresh))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTournamentActionPerformed
        JDialog dialog = new JDialog(ancestor, "Dodavanje turnira", true);
        ControlerC.getInstance().setActiveWindow(dialog);

        PanelNewTournament panel = new PanelNewTournament(dialog);
        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddTournamentActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        ControlerC.getInstance().setActiveWindow((Window) ancestor.getParent());
        ControlerC.getInstance().getFormMain().setPanelTournaments(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblTournamentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTournamentsMouseClicked
        try {
            int row = getSelectedRow();
            Tournament t = modelTournament.getTournament(row);
            modelMatch.setMatches(t.getMatches());
            if(t.getMatches().isEmpty()){
                JOptionPane.showMessageDialog(this, "Nema podataka za ovaj turnir!",
                        "Status",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            modelMatch.setMatches(new LinkedList<>());
        }
        
    }//GEN-LAST:event_tblTournamentsMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        requestTournaments();
        modelMatch.setMatches(new LinkedList<>());
    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTournament;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMatches;
    private javax.swing.JLabel lblTournaments;
    private javax.swing.JTable tblMatches;
    private javax.swing.JTable tblTournaments;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelTournament getModelTournament() {
        return modelTournament;
    }

    public void setModelTournament(TableModelTournament modelTournament) {
        this.modelTournament = modelTournament;
    }

    public TableModelMatch getModelMatch() {
        return modelMatch;
    }

    public void setModelMatch(TableModelMatch modelMatch) {
        this.modelMatch = modelMatch;
    }
    
    public void requestTournaments() {
        ClientRequest cr = new ClientRequest();
        cr.setOperation(Operation.GET_ALL_TOURNAMENTS);
        CommunicationC.getInstance().sendRequest(cr);
    }


    private void prepareTableMatch() {
        LinkedList<Match> list = new LinkedList<>();
        modelMatch = new TableModelMatch(list);
        tblMatches.setModel(modelMatch);
        tblMatches.setEnabled(false);
        
        for (int i = modelMatch.getColumnCount()-1; i >=0 ; i--) {
            TableColumn column = tblMatches.getColumnModel().getColumn(i);
            switch(i){
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(65);
                    break;
                case 2:
                    column.setPreferredWidth(100);
                    break;
                case 3:
                    column.setPreferredWidth(100);
                    break;
                case 4:
                    column.setPreferredWidth(50);
                    break;
                case 5:
                    column.setPreferredWidth(60);
                    break;
                case 6:
                    column.setPreferredWidth(50);
                    break;
            }
        }
    }
    

    private void prepareTableTournament() {
        LinkedList<Tournament> list = new LinkedList<>();
        modelTournament = new TableModelTournament(list);
        tblTournaments.setModel(modelTournament);
    }

    private int getSelectedRow() throws Exception {
        int selectedRow = tblTournaments.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Za prikaz detalja odaberite turnir!");
            throw new Exception("Za prikaz detalja odaberite turnir!");
        }
        return selectedRow;
    }
    
}
