/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.club;

import communication.CommunicationC;
import constants.Operation;
import domain.City;
import domain.Club;
import form.FormMain;
import form.FormMode;
import java.awt.Window;
import java.util.LinkedList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import logic.ControlerC;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author TANJA-PC
 */
public class PanelClub extends javax.swing.JPanel {

    private JDialog ancestor;
    FormMode mode;

    /**
     * Creates new form PanelNewClub
     *
     * @param mode
     * @param ancestor
     */
    public PanelClub(FormMode mode, JDialog ancestor) {
        initComponents();
        this.mode = mode;
        this.ancestor = ancestor;
        ControlerC.getInstance().getFormMain().setPanelClub(this);
        
        requestCities();
        //populateCMBCities();
        adjustForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblClubRegNo = new javax.swing.JLabel();
        txtClubRegNo = new javax.swing.JTextField();
        lblClubName = new javax.swing.JLabel();
        txtClubName = new javax.swing.JTextField();
        lblClubAdress = new javax.swing.JLabel();
        txtClubAdress = new javax.swing.JTextField();
        lblNoOfWins_match = new javax.swing.JLabel();
        txtNoOfWins_match = new javax.swing.JTextField();
        lblNoOfWins_tournament = new javax.swing.JLabel();
        txtNoOfWins_tournament = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        btnSaveClub = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cmbCity = new javax.swing.JComboBox<>();
        btnEditClub = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        lblClubRegNo.setText("Registarski broj kluba:");

        lblClubName.setText("Naziv kluba:");

        lblClubAdress.setText("Adresa:");

        lblNoOfWins_match.setText("Broj dobijenih utakmica:");

        txtNoOfWins_match.setEditable(false);

        lblNoOfWins_tournament.setText("Broj osvojenih turnira:");

        txtNoOfWins_tournament.setEditable(false);

        lblCity.setText("Grad:");

        btnSaveClub.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSaveClub.setText("Dodaj klub");
        btnSaveClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveClubActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnEditClub.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEditClub.setText("Izmeni");
        btnEditClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditClubActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdate.setText("AÅ¾uriraj");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblNoOfWins_match, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtNoOfWins_match, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblClubName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblClubRegNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblClubAdress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNoOfWins_tournament, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNoOfWins_tournament)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbCity, javax.swing.GroupLayout.Alignment.LEADING, 0, 264, Short.MAX_VALUE)
                        .addComponent(txtClubAdress, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtClubName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtClubRegNo, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditClub)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveClub)))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClubRegNo)
                    .addComponent(txtClubRegNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClubName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClubName))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblClubAdress)
                    .addComponent(txtClubAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoOfWins_match)
                    .addComponent(lblNoOfWins_tournament))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNoOfWins_match, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNoOfWins_tournament, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveClub)
                    .addComponent(btnCancel)
                    .addComponent(btnEditClub)
                    .addComponent(btnUpdate))
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        
        switch (mode) {
            case EDIT:
                mode = FormMode.VIEW;
                adjustForm();
                break;
                
            case NEW:
            case VIEW:
                ControlerC.getInstance().setActiveWindow((Window) ancestor.getParent());
                ControlerC.getInstance().getFormMain().setPanelClub(null);
                ancestor.dispose();
                break;
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveClubActionPerformed
        try {
            validation();
            String regNo = txtClubRegNo.getText();
            String name = txtClubName.getText();
            String adress = txtClubAdress.getText();
            City city = (City) cmbCity.getSelectedItem();
            int nowMatch = 0;
            int nowTournament = 0;
            Club club = new Club(regNo, name, adress, nowMatch, nowTournament, city);
            
            System.out.println(club);
            ClientRequest cr = new ClientRequest();
            cr.setOperation(Operation.ADD_CLUB);
            cr.setParameter(club);
            CommunicationC.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska!",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSaveClubActionPerformed

    private void btnEditClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditClubActionPerformed
        this.mode = FormMode.EDIT;
        adjustForm();
    }//GEN-LAST:event_btnEditClubActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            validation();
            String regNo = txtClubRegNo.getText();
            String name = txtClubName.getText();
            String adress = txtClubAdress.getText();
            City city = (City) cmbCity.getSelectedItem();
            int nowMatch = Integer.valueOf(txtNoOfWins_match.getText().trim());
            int nowTournament = Integer.valueOf(txtNoOfWins_tournament.getText().trim());
            Club club = new Club(regNo, name, adress, nowMatch, nowTournament, city);
            
            Session.getInstance().getUseCaseParams().put("club", club);
            
            
            ClientRequest cr = new ClientRequest();
            cr.setOperation(Operation.UPDATE_CLUB);
            cr.setParameter(club);
            CommunicationC.getInstance().sendRequest(cr);
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moÅ¾e da izmeni podatke o klubu." + ex.getMessage(), "GreÅ¡ka!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEditClub;
    private javax.swing.JButton btnSaveClub;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblClubAdress;
    private javax.swing.JLabel lblClubName;
    private javax.swing.JLabel lblClubRegNo;
    private javax.swing.JLabel lblNoOfWins_match;
    private javax.swing.JLabel lblNoOfWins_tournament;
    private javax.swing.JTextField txtClubAdress;
    private javax.swing.JTextField txtClubName;
    private javax.swing.JTextField txtClubRegNo;
    private javax.swing.JTextField txtNoOfWins_match;
    private javax.swing.JTextField txtNoOfWins_tournament;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }
    
    private void resetTextFields() {
        txtClubRegNo.setText("");
        txtClubName.setText("");
        txtClubAdress.setText("");
    }

    private void setNoOfWins() {
        txtNoOfWins_match.setText(0 + "");
        txtNoOfWins_tournament.setText(0 + "");
    }

    private void validation() throws Exception {
        if (txtClubRegNo.getText().isEmpty() || txtClubRegNo.getText().equals("")) {
            throw new Exception("Nije unet registarski broj kluba!");
        } else if (txtClubRegNo.getText().length() != 7) {
            throw new Exception("Registarski broj kluba mora imati 7 cifara!");
        } else {
            String regNo = txtClubRegNo.getText();
            for (int i = 0; i < regNo.length(); i++) {
                if (!Character.isDigit(regNo.charAt(i))) {
                    throw new Exception("Registarski broj kluba moÅ¾e sadrÅ¾ati samo brojeve!");
                }
            }
        }

        if (txtClubName.getText().isEmpty() || txtClubName.getText().equals("")) {
            throw new Exception("Nije unet naziv kluba!");
        }
        if (txtClubAdress.getText().isEmpty() || txtClubAdress.getText().equals("")) {
            throw new Exception("Nije uneta adresa kluba!");
        }
        if (cmbCity.getSelectedIndex() == -1) {
            throw new Exception("Niste odabrali grad!");
        }
        
        if (mode.equals(FormMode.EDIT)) {
            validateNow(txtNoOfWins_match.getText().trim());
            validateNow(txtNoOfWins_tournament.getText().trim());
        }
    }

    private void requestCities() {
        FormMain fm = ControlerC.getInstance().getFormMain();
        if(fm.getPanelSearchClub() != null){
            LinkedList<City> list = fm.getPanelSearchClub().getCitiesFromCMB();
            populateCMBCities(list);
        } else {
            ClientRequest cr = new ClientRequest();
            Session.getInstance().getUseCaseParams().put("request city", "PanelClub");
            cr.setOperation(Operation.GET_ALL_CITIES);
            CommunicationC.getInstance().sendRequest(cr);
        }
    }

    public void populateCMBCities(LinkedList<City> cities) {
        //LinkedList<City> cities = (LinkedList<City>) Session.getInstance().getUseCaseParams().get("cities");
        cmbCity.removeAllItems();
        for (City c : cities) {
            cmbCity.addItem(c);
        }
    }

    
    private void adjustForm() {
        switch (mode) {
            case NEW:
                resetForNewClub();

                txtNoOfWins_match.setEnabled(false);
                txtNoOfWins_tournament.setEnabled(false);
                //txtNoOfWins_match.setEditable(false);
                //txtNoOfWins_tournament.setEditable(false);                

                btnSaveClub.setVisible(true);
                btnEditClub.setVisible(false);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);
                btnCancel.setText("Odustani");
                
                setTitle("Registrovanje novog kluba");
                break;

            case EDIT:
                txtClubRegNo.setEnabled(false);

                txtClubName.setEnabled(true);
                txtClubAdress.setEnabled(true);
                cmbCity.setEnabled(true);
                txtNoOfWins_match.setEditable(true);
                txtNoOfWins_tournament.setEditable(true);     
                
                btnSaveClub.setVisible(false);
                btnEditClub.setVisible(false);
                btnUpdate.setVisible(true);
                btnCancel.setVisible(true);
                btnCancel.setText("Odustani");

                setTitle("Izmena kluba");
                break;

            case VIEW:
                txtClubRegNo.setEnabled(false);
                txtClubName.setEnabled(false);
                txtClubAdress.setEnabled(false);
                cmbCity.setEnabled(false);
                txtNoOfWins_match.setEnabled(false);
                txtNoOfWins_tournament.setEnabled(false);

                btnSaveClub.setVisible(false);
                btnEditClub.setVisible(true);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);
                //btnCancel.setName("IzaÄi");
                btnCancel.setText("IzaÄi");

                setTitle("Pregled kluba");
                setClub();
                break;
        }
    }

    private void setTitle(String title) {
        ancestor.setTitle(title);
    }

    private void setClub() {
        Club c = (Club) Session.getInstance().getUseCaseParams().get("club");
        System.out.println(c);

        txtClubRegNo.setText(c.getClubRegistrationNumber());
        txtClubName.setText(c.getClubName());
        txtClubAdress.setText(c.getClubAdress());
        txtNoOfWins_match.setText(c.getNumberOfWins_Match() + "");
        txtNoOfWins_tournament.setText(c.getNumberOfWins_Tournament() + "");
        cmbCity.setSelectedItem(c.getCity());
    }

    public void resetForNewClub() {
        resetTextFields();
        setNoOfWins();
    }

    /*
    public void setCity() {
        City c = ((Club) Session.getInstance().getUseCaseParams().get("club")).getCity();
        cmbCity.setSelectedItem(c);
        //== null ? null : c.getCity()
    }
    */
    
    private void validateNow(String now) throws Exception {
        if (now.isEmpty() || now.equals("")) {
            throw new Exception("Nije unet broj pobeda!");
        }
        
        for (int i = 0; i < now.length(); i++) {
            if (!Character.isDigit(now.charAt(i))) {
                throw new Exception("Broj pobeda ne sme sadrÅ¾ati slova!");
            }
        }
        
        int value = Integer.valueOf(now);
        if (value < 0) {
            throw new Exception("Broj pobeda ne sme biti negativan broj!");
        }
       
        
    }

    
}
