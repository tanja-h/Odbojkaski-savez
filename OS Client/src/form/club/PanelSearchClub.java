/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.club;

import communication.CommunicationC;
import constants.Operation;
import domain.City;
import domain.Club;
import form.FormMain;
import form.FormMode;
import form.club.model.TableModelClub;
import java.awt.Window;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import logic.ControlerC;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author TANJA-PC
 */
public class PanelSearchClub extends javax.swing.JPanel {

    private JDialog ancestor;
    ButtonGroup buttonGroup;
    private TableModelClub modelSearchClub;
    

    /**
     * Creates new form PanelSearchClub
     * @param ancestor
     */
    public PanelSearchClub(JDialog ancestor) {
        initComponents();
        this.ancestor = ancestor;
        prepareTable();
        prepareOptions();
        requestCities();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        lblChooseCriterion = new javax.swing.JLabel();
        rbClubRegNo = new javax.swing.JRadioButton();
        rbClubName = new javax.swing.JRadioButton();
        rbClubAdress = new javax.swing.JRadioButton();
        rbNow_match = new javax.swing.JRadioButton();
        rbNow_tournament = new javax.swing.JRadioButton();
        rbCity = new javax.swing.JRadioButton();
        lblCriterionValue = new javax.swing.JLabel();
        txtCriterionValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchClubs = new javax.swing.JTable();
        lblChoose = new javax.swing.JLabel();
        rbAll = new javax.swing.JRadioButton();
        btnCancel = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        cmbCity = new javax.swing.JComboBox<>();

        lblChooseCriterion.setText("Ili odaberi kriterijum za pretragu:");

        radioButtonGroup.add(rbClubRegNo);
        rbClubRegNo.setText("Registarski broj kluba");
        rbClubRegNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClubRegNoActionPerformed(evt);
            }
        });

        radioButtonGroup.add(rbClubName);
        rbClubName.setText("Naziv kluba");
        rbClubName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClubNameActionPerformed(evt);
            }
        });

        radioButtonGroup.add(rbClubAdress);
        rbClubAdress.setText("Adresa kluba");
        rbClubAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClubAdressActionPerformed(evt);
            }
        });

        radioButtonGroup.add(rbNow_match);
        rbNow_match.setText("Broj dobijenih utakmica");
        rbNow_match.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNow_matchActionPerformed(evt);
            }
        });

        radioButtonGroup.add(rbNow_tournament);
        rbNow_tournament.setText("Broj dobijenih turnira");
        rbNow_tournament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNow_tournamentActionPerformed(evt);
            }
        });

        radioButtonGroup.add(rbCity);
        rbCity.setText("Grad");
        rbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCityActionPerformed(evt);
            }
        });

        lblCriterionValue.setText("Vrednost kriterijuma:");

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblSearchClubs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblSearchClubs);

        lblChoose.setText("Odaberi:");

        radioButtonGroup.add(rbAll);
        rbAll.setText("prikaži sve");
        rbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDetails.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(rbAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblChooseCriterion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbClubRegNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbClubName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbClubAdress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbNow_match, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbNow_tournament, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCriterionValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCriterionValue, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(rbCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblChoose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbAll)
                        .addGap(18, 18, 18)
                        .addComponent(lblChooseCriterion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbClubRegNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbClubName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbClubAdress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbCity)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbNow_match)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbNow_tournament)
                        .addGap(18, 18, 18)
                        .addComponent(lblCriterionValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCriterionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSearch)
                    .addComponent(btnDetails))
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        ControlerC.getInstance().setActiveWindow((Window) ancestor.getParent());
        ControlerC.getInstance().getFormMain().setPanelSearchClub(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String criterion = getCriterion();
            
            ClientRequest cr = new ClientRequest();
            if (criterion.equals("")) {
                cr.setOperation(Operation.GET_ALL_CLUBS);
                Session.getInstance().getUseCaseParams().put("request club", "PanelSearchClub");
            }else{
                cr.setOperation(Operation.SEARCH_CLUBS);
                cr.setParameter(criterion);
            }
            CommunicationC.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                                                JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(PanelSearchClub.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void rbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCityActionPerformed
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
        cmbCity.setEnabled(true);
    }//GEN-LAST:event_rbCityActionPerformed

    private void rbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllActionPerformed
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbAllActionPerformed

    private void rbClubRegNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClubRegNoActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbClubRegNoActionPerformed

    private void rbClubNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClubNameActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbClubNameActionPerformed

    private void rbClubAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClubAdressActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbClubAdressActionPerformed

    private void rbNow_matchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNow_matchActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbNow_matchActionPerformed

    private void rbNow_tournamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNow_tournamentActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCity.setEnabled(false);
    }//GEN-LAST:event_rbNow_tournamentActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Club club = modelSearchClub.getClub(selectedRow);
            Session.getInstance().getUseCaseParams().put("club", club);

            JDialog dialog = new JDialog(ancestor, true);
            ControlerC.getInstance().setActiveWindow(dialog);

            PanelClub panelClub = new PanelClub(FormMode.VIEW, dialog);
            //ControlerC.getInstance().getFormMain().setPanelClub(panelClub);
            
            dialog.add(panelClub);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FormMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChoose;
    private javax.swing.JLabel lblChooseCriterion;
    private javax.swing.JLabel lblCriterionValue;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbCity;
    private javax.swing.JRadioButton rbClubAdress;
    private javax.swing.JRadioButton rbClubName;
    private javax.swing.JRadioButton rbClubRegNo;
    private javax.swing.JRadioButton rbNow_match;
    private javax.swing.JRadioButton rbNow_tournament;
    private javax.swing.JTable tblSearchClubs;
    private javax.swing.JTextField txtCriterionValue;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelClub getModelSearchClub() {
        return modelSearchClub;
    }

    public void setModelSearchClub(TableModelClub modelSearchClub) {
        this.modelSearchClub = modelSearchClub;
    }
    
    private void requestCities() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request city", "PanelSearchClub");
        cr.setOperation(Operation.GET_ALL_CITIES);
        CommunicationC.getInstance().sendRequest(cr);
    }
    
    public void populateCMBCities(LinkedList<City> cities) {
        cmbCity.removeAllItems();
        for (City c : cities) {
            cmbCity.addItem(c);
        }
    }
    
    public LinkedList<City> getCitiesFromCMB(){
        LinkedList<City> list = new LinkedList<>();
        for (int i = 0; i < cmbCity.getItemCount(); i++) {
            City c = (City) cmbCity.getItemAt(i);
            list.add(c);
        }
        System.out.println(list);
        return list;
    }
    
    private void prepareTable() {
        LinkedList<Club> list = new LinkedList<>();
        modelSearchClub = new TableModelClub(list);
        tblSearchClubs.setModel(modelSearchClub);
        
        for (int i = modelSearchClub.getColumnCount()-1; i >=0 ; i--) {
            TableColumn column = tblSearchClubs.getColumnModel().getColumn(i);
            switch(i){
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(105);
                    break;
                case 2:
                    column.setPreferredWidth(65);
                    break;
                case 3:
                    column.setPreferredWidth(130);
                    break;
                case 4:
                    column.setPreferredWidth(80);
                    break;
                case 5:
                    column.setPreferredWidth(80);
                    break;
            }
        }
    }

    private void prepareOptions() {
        rbAll.setSelected(true);
        txtCriterionValue.setEnabled(false);
        cmbCity.setEnabled(false);
    }

    private String getCriterion() throws Exception {
        String criterion = "";

        if (!rbAll.isSelected()) {
            String criterionName = "";
            String criterionValue = "";

            if (!rbCity.isSelected()) {
                criterionValue = txtCriterionValue.getText();
                if (criterionValue == null || criterionValue.equals("")) {
                    throw new Exception("Nije unet kriterijum pretrage!");
                }

                if (rbClubRegNo.isSelected()) {
                    //alias cl because of joinClause
                    validationRegNo(criterionValue);
                    criterionName = "cl.club_registration_number";
                    criterionValue = "LIKE '%" + criterionValue + "%'";

                } else if (rbClubName.isSelected()) {
                    criterionName = "LOWER(cl.club_name)";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";
                    

                } else if (rbClubAdress.isSelected()) {
                    criterionName = "LOWER(cl.club_adress)";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";

                } else if (rbNow_match.isSelected()) {
                    criterionValue = criterionValue.trim();
                    validationNow(criterionValue);
                    
                    criterionName = "cl.number_of_wins_match";
                    criterionValue = " = " + criterionValue;

                } else {
                    validationNow(criterionValue);
                    criterionName = "cl.number_of_wins_tournament";
                    criterionValue = " = " + criterionValue;
                }

            } else {
                criterionName = "cl.city";
                City c = (City) cmbCity.getSelectedItem();
                validationCity(c);
                criterionValue = " = '" + c.getZipCode() + "'";
            }

            criterion = criterionName + criterionValue;
        }
        return criterion;
    }

    private void validationRegNo(String criterionValue) throws Exception {
        if (criterionValue.length() != 7) {
            throw new Exception("Registarski broj kluba mora imati 7 cifara!");
        } else {
            String regNo = criterionValue;
            for (int i = 0; i < regNo.length(); i++) {
                if (!Character.isDigit(regNo.charAt(i))) {
                    throw new Exception("Registarski broj kluba može sadržati samo brojeve!");
                }
            }
        }
    }

    private void validationNow(String criterionValue) throws Exception {
        for (int i = 0; i < criterionValue.length(); i++) {
                if (!Character.isDigit(criterionValue.charAt(i))) {
                    throw new Exception("Broj pobeda ne sme sadržati slova!");
                }
            }
        
        int value = Integer.valueOf(criterionValue);
        if (value < 0) {
            throw new Exception("Broj pobeda ne sme biti negativan broj!");
        }
    }

    private void validationCity(City c) throws Exception {
        if (c == null) {
            throw new Exception("Niste odabrali grad!");
        }
    }

    public void setListForModelSearchClub(LinkedList<Club> clubs) {
        modelSearchClub.setClubs(clubs);
        
        if(!modelSearchClub.getClubs().isEmpty()){
            JOptionPane.showMessageDialog(this, "Pronađena je lista klubova!",
                    "Status", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Klub nije pronađen za zadati kriterijum!",
                                        "Greška", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private int getSelectedRow() throws Exception {
        int selectedRow = tblSearchClubs.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Niste odabrali klub!");
            throw new Exception("Niste odabrali klub!");
        }
        return selectedRow;
    }

}
