/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.player;

import communication.CommunicationC;
import constants.Operation;
import domain.City;
import domain.Club;
import domain.domainEnum.Gender;
import domain.Player;
import domain.Position;
import form.FormMode;
import form.player.model.TableModelPlayer;
import java.awt.Window;
import java.util.LinkedList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import logic.ControlerC;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author TANJA-PC
 */
public class PanelSearchPlayer extends javax.swing.JPanel {

    private JDialog ancestor;
    private TableModelPlayer modelSearchPlayer;
    //private PanelPlayer panelPlayer;

    /**
     * Creates new form PanelSearchPlayer
     *
     * @param ancestor
     */
    public PanelSearchPlayer(JDialog ancestor) {
        initComponents();
        this.ancestor = ancestor;

        prepareTable();
        prepareOptions();
        populateCMBGender();
        requestForCMB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        lblChoose = new javax.swing.JLabel();
        lblChooseCriterion = new javax.swing.JLabel();
        rbAll = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchPlayers = new javax.swing.JTable();
        lblCriterionValue = new javax.swing.JLabel();
        txtCriterionValue = new javax.swing.JTextField();
        rbPlayerRegNo = new javax.swing.JRadioButton();
        rbName = new javax.swing.JRadioButton();
        rbAdress = new javax.swing.JRadioButton();
        rbJerseyNumber = new javax.swing.JRadioButton();
        rbCity = new javax.swing.JRadioButton();
        cmbCity = new javax.swing.JComboBox<>();
        rbPosition = new javax.swing.JRadioButton();
        cmbPosition = new javax.swing.JComboBox<>();
        btnCancel = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        rbClub = new javax.swing.JRadioButton();
        cmbClub = new javax.swing.JComboBox<>();
        btnDetails = new javax.swing.JButton();
        rbGender = new javax.swing.JRadioButton();
        cmbGender = new javax.swing.JComboBox<>();

        lblChoose.setText("Odaberi:");

        lblChooseCriterion.setText("Ili odaberi kriterijum za pretragu:");

        buttonGroup.add(rbAll);
        rbAll.setText("prikaži sve");
        rbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllActionPerformed(evt);
            }
        });

        tblSearchPlayers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblSearchPlayers);

        lblCriterionValue.setText("Vrednost kriterijuma:");

        buttonGroup.add(rbPlayerRegNo);
        rbPlayerRegNo.setText("Registarski broj igrača");
        rbPlayerRegNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPlayerRegNoActionPerformed(evt);
            }
        });

        buttonGroup.add(rbName);
        rbName.setText("Ime i prezime");
        rbName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNameActionPerformed(evt);
            }
        });

        buttonGroup.add(rbAdress);
        rbAdress.setText("Adresa");
        rbAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAdressActionPerformed(evt);
            }
        });

        buttonGroup.add(rbJerseyNumber);
        rbJerseyNumber.setText("Broj dresa");
        rbJerseyNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbJerseyNumberActionPerformed(evt);
            }
        });

        buttonGroup.add(rbCity);
        rbCity.setText("Grad");
        rbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCityActionPerformed(evt);
            }
        });

        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonGroup.add(rbPosition);
        rbPosition.setText("Pozicija");
        rbPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPositionActionPerformed(evt);
            }
        });

        cmbPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        buttonGroup.add(rbClub);
        rbClub.setText("Klub");
        rbClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClubActionPerformed(evt);
            }
        });

        cmbClub.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnDetails.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        buttonGroup.add(rbGender);
        rbGender.setText("Pol");
        rbGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGenderActionPerformed(evt);
            }
        });

        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(rbClub, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbClub, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCriterionValue, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCriterionValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                .addComponent(rbJerseyNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(rbPlayerRegNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblChoose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblChooseCriterion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbAdress, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(rbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(rbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbGender, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(rbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblChoose)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbAll)
                        .addGap(18, 18, 18)
                        .addComponent(lblChooseCriterion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbClub)
                            .addComponent(cmbClub, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(rbPlayerRegNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbAdress)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbGender)
                            .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbCity)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPosition)
                            .addComponent(cmbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(rbJerseyNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(lblCriterionValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCriterionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSearch)
                    .addComponent(btnDetails))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllActionPerformed
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);

    }//GEN-LAST:event_rbAllActionPerformed

    private void rbPlayerRegNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPlayerRegNoActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
    }//GEN-LAST:event_rbPlayerRegNoActionPerformed

    private void rbNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNameActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
    }//GEN-LAST:event_rbNameActionPerformed

    private void rbAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAdressActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
    }//GEN-LAST:event_rbAdressActionPerformed

    private void rbJerseyNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbJerseyNumberActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
    }//GEN-LAST:event_rbJerseyNumberActionPerformed

    private void rbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCityActionPerformed
        cmbCity.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbPosition.setEnabled(false);
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
    }//GEN-LAST:event_rbCityActionPerformed

    private void rbPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPositionActionPerformed
        cmbPosition.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
    }//GEN-LAST:event_rbPositionActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        ControlerC.getInstance().setActiveWindow((Window) ancestor.getParent());
        ControlerC.getInstance().getFormMain().setPanelSearchClub(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String criterion = getCriterion();
            //String criterion = "";

            ClientRequest cr = new ClientRequest();
            if (criterion.equals("")) {
                cr.setOperation(Operation.GET_ALL_PLAYERS);
                Session.getInstance().getUseCaseParams().put("request player", "PanelSearchPlayer");
            } else {
                cr.setOperation(Operation.SEARCH_PLAYERS);
                cr.setParameter(criterion);
            }
            CommunicationC.getInstance().sendRequest(cr);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(PanelSearchClub.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void rbClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClubActionPerformed
        cmbClub.setEnabled(true);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
    }//GEN-LAST:event_rbClubActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Player player = modelSearchPlayer.getPlayer(selectedRow);
            Session.getInstance().getUseCaseParams().put("player", player);

            JDialog dialog = new JDialog(ancestor, true);
            ControlerC.getInstance().setActiveWindow(dialog);
            PanelPlayer panelPlayer = new PanelPlayer(FormMode.VIEW, dialog);
            dialog.add(panelPlayer);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void rbGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbGenderActionPerformed
        cmbGender.setEnabled(true);
        cmbClub.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
        txtCriterionValue.setEnabled(false);
        txtCriterionValue.setText("");
    }//GEN-LAST:event_rbGenderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JComboBox<Object> cmbClub;
    private javax.swing.JComboBox<Object> cmbGender;
    private javax.swing.JComboBox<Object> cmbPosition;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChoose;
    private javax.swing.JLabel lblChooseCriterion;
    private javax.swing.JLabel lblCriterionValue;
    private javax.swing.JRadioButton rbAdress;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbCity;
    private javax.swing.JRadioButton rbClub;
    private javax.swing.JRadioButton rbGender;
    private javax.swing.JRadioButton rbJerseyNumber;
    private javax.swing.JRadioButton rbName;
    private javax.swing.JRadioButton rbPlayerRegNo;
    private javax.swing.JRadioButton rbPosition;
    private javax.swing.JTable tblSearchPlayers;
    private javax.swing.JTextField txtCriterionValue;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelPlayer getModelSearchPlayer() {
        return modelSearchPlayer;
    }

    public void setModelSearchPlayer(TableModelPlayer modelSearchPlayer) {
        this.modelSearchPlayer = modelSearchPlayer;
    }

    private String getCriterion() throws Exception {
        String criterion = "";

        if (!rbAll.isSelected()) {
            String criterionName = "";
            String criterionValue = "";

            if (!rbClub.isSelected() && !rbGender.isSelected() && !rbCity.isSelected() && !rbPosition.isSelected()) {
                criterionValue = txtCriterionValue.getText();
                if (criterionValue == null || criterionValue.equals("")) {
                    throw new Exception("Nije unet kriterijum pretrage!");
                }

                if (rbPlayerRegNo.isSelected()) {
                    //alias p because of joinClause
                    validationRegNo(criterionValue);
                    criterionName = "p.player_registration_number";
                    criterionValue = "LIKE '%" + criterionValue + "%'";

                } else if (rbName.isSelected()) {
                    criterionName = "LOWER(p.name)";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";

                } else if (rbAdress.isSelected()) {
                    criterionName = "LOWER(p.player_adress)";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";

                } else {    //(rbJerseyNumber.isSelected())
                    criterionValue = criterionValue.trim();
                    validationJerseyNumber(criterionValue);
                    criterionName = "p.jersey_number";
                    criterionValue = " = " + criterionValue;
                }
            } else {
                if (rbClub.isSelected()) {
                    criterionName = "p.club_registration_number";
                    Club c = (Club) cmbClub.getSelectedItem();
                    validationClub(c);
                    criterionValue = " = '" + c.getClubRegistrationNumber() + "'";
                } else if (rbGender.isSelected()) {
                    criterionName = "p.gender";
                    Gender gender = (Gender) cmbGender.getSelectedItem();
                    validationGender(gender);
                    criterionValue = " = '" + gender + "'";
                } else if (rbCity.isSelected()) {
                    criterionName = "p.city";
                    City c = (City) cmbCity.getSelectedItem();
                    validationCity(c);
                    criterionValue = " = '" + c.getZipCode() + "'";
                } else {    //(cmbPosition.isSelected())
                    criterionName = "p.positionID";
                    Position p = (Position) cmbPosition.getSelectedItem();
                    validationPosition(p);
                    criterionValue = " = " + p.getPositionID() + "";
                }
            }

            criterion = criterionName + criterionValue;
        }
        return criterion;
    }

    private void requestForCMB() {
        requestCities();
        requestClubs();
        requestPositions();
    }

    private void requestCities() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request city", "PanelSearchPlayer");
        cr.setOperation(Operation.GET_ALL_CITIES);
        CommunicationC.getInstance().sendRequest(cr);
    }

    private void requestClubs() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request club", "PanelSearchPlayer");
        cr.setOperation(Operation.GET_ALL_CLUBS);
        CommunicationC.getInstance().sendRequest(cr);
    }

    private void requestPositions() {
        ClientRequest cr = new ClientRequest();
        Session.getInstance().getUseCaseParams().put("request position", "PanelSearchPlayer");
        cr.setOperation(Operation.GET_ALL_POSITIONS);
        CommunicationC.getInstance().sendRequest(cr);
    }

    private void populateCMBGender() {
        Gender[] values = Gender.values();
        cmbGender.removeAllItems();
        for (Gender g : values) {
            cmbGender.addItem(g);
        }
    }

    public void populateCMBClubs(LinkedList<Club> clubs) {
        cmbClub.removeAllItems();
        for (Club c : clubs) {
            cmbClub.addItem(c);
        }
    }

    public void populateCMBCities(LinkedList<City> cities) {
        cmbCity.removeAllItems();
        for (City c : cities) {
            cmbCity.addItem(c);
        }
    }

    public void populateCMBPositions(LinkedList<Position> positions) {
        cmbPosition.removeAllItems();
        for (Position position : positions) {
            cmbPosition.addItem(position);
        }
    }

    public LinkedList<City> getCitiesFromCMB() {
        LinkedList<City> list = new LinkedList<>();
        for (int i = 0; i < cmbCity.getItemCount(); i++) {
            City c = (City) cmbCity.getItemAt(i);
            list.add(c);
        }
        return list;
    }

    public LinkedList<Club> getClubsFromCMB() {
        LinkedList<Club> list = new LinkedList<>();
        for (int i = 0; i < cmbClub.getItemCount(); i++) {
            Club c = (Club) cmbClub.getItemAt(i);
            list.add(c);
        }
        return list;
    }

    public LinkedList<Position> getPositionsFromCMB() {
        LinkedList<Position> list = new LinkedList<>();
        for (int i = 0; i < cmbPosition.getItemCount(); i++) {
            Position p = (Position) cmbPosition.getItemAt(i);
            list.add(p);
        }
        return list;
    }

    private void prepareTable() {
        LinkedList<Player> list = new LinkedList<>();
        modelSearchPlayer = new TableModelPlayer(list);
        tblSearchPlayers.setModel(modelSearchPlayer);
    }

    private void prepareOptions() {
        rbAll.setSelected(true);
        txtCriterionValue.setEnabled(false);
        cmbClub.setEnabled(false);
        cmbGender.setEnabled(false);
        cmbCity.setEnabled(false);
        cmbPosition.setEnabled(false);
    }

    private int getSelectedRow() throws Exception {
        int selectedRow = tblSearchPlayers.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Niste odabrali igrača!");
            throw new Exception("Niste odabrali igrača!");
        }
        return selectedRow;
    }

    public void setListForModelSearchPlayer(LinkedList<Player> players) {
        modelSearchPlayer.setPlayers(players);

        if (!modelSearchPlayer.getPlayers().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pronađena je lista igrača!",
                    "Status", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Igrač nije pronađen za zadati kriterijum!",
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void validationRegNo(String criterionValue) throws Exception {
        if (criterionValue.length() != 5) {
            throw new Exception("Registarski broj igrača mora imati 5 cifara!");
        } else {
            String regNo = criterionValue;
            for (int i = 0; i < regNo.length(); i++) {
                if (!Character.isDigit(regNo.charAt(i))) {
                    throw new Exception("Registarski broj igrača može sadržati samo brojeve!");
                }
            }
        }
    }

    private void validationJerseyNumber(String criterionValue) throws Exception {
        String jerseyNumber = criterionValue;

        for (int i = 0; i < jerseyNumber.length(); i++) {
            if (!Character.isDigit(jerseyNumber.charAt(i))) {
                throw new Exception("Broj dresa igrača ne sme sadržati slova!");
            }
        }

        if (jerseyNumber.length() > 2) {
            throw new Exception("Broj dresa mora biti jednocifren ili dvocifren broj!");
        }

        int value = Integer.valueOf(jerseyNumber);
        if (value < 0) {
            throw new Exception("Broj dresa ne sme biti negativan broj!");
        }

    }

    private void validationCity(City c) throws Exception {
        if (c == null) {
            throw new Exception("Niste odabrali grad!");
        }
    }

    private void validationClub(Club c) throws Exception {
        if (c == null) {
            throw new Exception("Niste odabrali klub!");
        }
    }

    private void validationPosition(Position p) throws Exception {
        if (p == null) {
            throw new Exception("Niste odabrali poziciju!");
        }
    }

    private void validationGender(Gender g) throws Exception {
        if (g == null) {
            throw new Exception("Niste odabrali pol!");
        }
    }

}
